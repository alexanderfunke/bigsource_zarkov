/** * $Id$ * $Date$ * Source by BigSource Alexander Funke und Kim Christiansen GbR * Visit blog.bigsource.de for updates and more free code. * Please contact info@bigsource.de for more information. *//** * Copyright (c) 2008 BigSource Alexander Funke und Kim Christiansen GbR *  * Permission is hereby granted, free of charge, to any person  * obtaining a copy of this software and associated documentation  * files (the "Software"), to deal in the Software without  * restriction, including without limitation the rights to use,  * copy, modify, merge, publish, distribute, sublicense, and/or sell  * copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be  * included in all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT  * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,  * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE. */package de.bigsource.utils {
	/**	 * @author Alexander Funke (alexander.funke@bigsource.de)	 * @version 0.5	 * @category Utils	 */	public class DateUtil 	{
		private static var _shortmonth : Array = new Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");        		private static var _longmonth : Array = new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December");        		private static var _shortday : Array = new Array("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat");		private static var _longday : Array = new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday");
				/**		 * Returns a formatted Date. 		 * @example		 * <listing version="3.0" >		 * DateUtil.getFormattedDate("%Y-%m-%d %H:%i:%s");		 * //Output: 2008-01-21 19:14:54		 * </listing>		 * <ul>		 * <li>%a - lowercase: Ante meridiem and Post meridiem (am or pm)</li>		 * <li>%A - uppercase: Ante meridiem and Post meridiem (AM or PM)</li>		 * <li>%B - Swatch-Internet-Time (000 to 999)</li>		 * <li>%c - ISO 8601 Date (2004-02-12T15:19:21+00:00)</li>		 * <li>%d - Day of the month, with leading zero (01 to 31)</li>		 * <li>%D - Day of the week (Mon to Sun)</li>		 * <li>%F - Monthname (January bis December)</li>		 * <li>%g - 12-hour-format, without leading zero (1 to 12)</li>		 * <li>%G - 24-hour-format, without leading zero (0 to 23)</li>		 * <li>%h - 12-hour-format, with leading zero (01 to 12)</li>		 * <li>%H - 24-hour-format, with leading zero (00 to 23)</li>		 * <li>%i - Minutes with leading zero (00 to 59)</li>		 * <li>%I - Summertime (0 or 1)</li>		 * <li>%j - Day of the month without leading zero (1 to 31)</li>		 * <li>%l - Day of the week (Sunday to Saturday)</li>		 * <li>%L - Leap Year (0 or 1)</li>		 * <li>%m - Month as number, with leading zero (01 to 12)</li>		 * <li>%M - Monthname with three characters (Jan to Dec)</li>		 * <li>%n - Month as number, without leading zero (1 to 12)</li>		 * <li>%O - Timediffernece to Greenwich time (GMT) in hours (+0200)</li>		 * <li>%r - RFC 2822 formatted Date (Thu, 21 Dec 2000 16:01:07 +0200)</li>		 * <li>%s - Seconds, with leading zero 	(00 to 59)</li>		 * <li>%S - Anhang der englischen Aufzählung für einen Monatstag, zwei Zeichen 	st, nd, rd oder th. Zur Verwendung mit j empfohlen.</li>		 * <li>%t - Days of the month (28 to 31)</li>		 * <li>%T - Timezone of the computer (EST, MDT ...)</li>		 * <li>%U - UNIX Time (January 1 1970 00:00:00 GMT)</li>		 * <li>%w - Numeric day of the week (0 for Sunday to 6 for Saturday)</li>		 * <li>%W - ISO-8601 Weeknumber of the year (0 to 53)</li>		 * <li>%Y - Year, four digits (1999 or 2003)</li>		 * <li>%y - Year, two digits (99 or 03)</li>		 * <li>%z - Day of the year (0 to 365)</li>		 * <li>%Z - Offset of the Timezone</li>		 * </ul>		 */
		public static function getFormattedDate(p_format : String, p_dateobj : Date = null) : String 		{			var date : Date = new Date();			if(p_dateobj != null) 			{				date = p_dateobj;			}						var rep : Array = new Array();			rep["%a"] = (date.hours > 12) ? "pm" : "am"; 			rep["%A"] = (date.hours > 12) ? "PM" : "AM"; 			rep["%B"] = DateUtil.getInternetTime(date); 			rep["%d"] = (date.date < 10) ? "0" + date.date : date.date; 			rep["%D"] = _shortday[date.day]; 			rep["%F"] = _longmonth[date.month]; 			rep["%g"] = (date.hours > 12) ? date.hours - 12 : date.hours; 			rep["%G"] = date.hours; 			rep["%h"] = (date.hours > 12) ? ((date.hours - 12) < 10) ? "0" + (date.hours - 12) : (date.hours - 12) : (date.hours < 10) ? "0" + date.hours : date.hours; 			rep["%H"] = (date.hours < 10) ? "0" + date.hours : date.hours; 			rep["%i"] = (date.minutes < 10) ? "0" + date.minutes : date.minutes; 			// TODO: Sommerzeit			rep["%I"] = "not implemented yet"; 			rep["%j"] = date.date; 			rep["%l"] = _longday[date.day]; 			rep["%L"] = DateUtil.isLeapYear(date); 			rep["%m"] = ((date.month + 1) < 10) ? "0" + (date.month + 1) : (date.month + 1); 			rep["%M"] = _shortmonth[date.month]; 			rep["%n"] = (date.month + 1); 			// TODO: Zeitunterschied			rep["%O"] = "not implemented yet";			rep["%s"] = (date.seconds < 10) ? "0" + (date.seconds) : (date.seconds); 			rep["%S"] = (date.day == 1) ? "st" : (date.day == 2) ? "nd" : (date.day == 3) ? "rd" : "";			rep["%t"] = DateUtil.getDaysofMonth(date); 			// TODO: Timezonename			rep["%T"] = "not implemented yet"; 			rep["%U"] = date.time; 			rep["%w"] = date.day; 			rep["%W"] = DateUtil.getCalendarWeek(date); 			rep["%Y"] = date.fullYear; 			rep["%y"] = new String(date.fullYear).slice(2, 2); 			rep["%z"] = DateUtil.getDayofYear(date); 			rep["%Z"] = date.timezoneOffset + " und " + date.toLocaleTimeString(); 			if(p_format.indexOf("%r") > -1) 			{				rep["%r"] = DateUtil.getFormattedDate("%D, %d %M %Y %H:%i:%s +0200", date); 			}			if(p_format.indexOf("%c") > -1) 			{				// TODO: Genaue Formatierung prüfen				rep["%c"] = DateUtil.getFormattedDate("%Y-%m-%dT%H:%i:%s+00:00", date); 			}						for( var prop:String in rep ) 			{				if(p_format.indexOf(prop) > -1) 				{					p_format = p_format.replace(prop, rep[prop]);				}				}						return p_format;		}
				/**		 * Returns the Swatch InternetTime. If p_dateobj is null a new Date Object is created		 *		 * @param p_dateobj Date (optional)		 */		public static function getInternetTime(p_dateobj : Date = null) : String 		{			var date : Date = p_dateobj || new Date();			var hour : Number = (date.getUTCHours() + 1 != 24) ? (date.getUTCHours() + 1) : 0;			var curtime : Number = hour * 3600 + date.getUTCMinutes() * 60 + date.getUTCSeconds();			return "@" + Math.round(curtime / 86.4);		}
				/**		 * Sets the shortnames for the days of the week. 		 * Array begins with sunday.		 *		 * @param p_names Array		 */		public static function setShortDaynames(p_names : Array) : void 		{			_shortday = p_names;		}
				/**		 * Sets the longnames for the days of the week.		 * Array begins with sunday.		 *		 * @param p_names Array		 */		public static function setLongDaynames(p_names : Array) : void 		{			_longday = p_names;		}
				/**		 * Sets the shortnames for the months of the year.		 * Array begins with january.		 *		 * @param p_names Array		 */		public static function setShortMonthnames(p_names : Array) : void 		{			_shortmonth = p_names;		}
				/**		 * Sets the longnames for the months of the year.		 * Array begins with january.		 *		 * @param p_names Array		 */		public static function setLongMonthnames(p_names : Array) : void 		{			_longmonth = p_names;		}
				/**		 * Returns calendarweek of the year. 		 * If p_dateobj is null a new Date Object is created		 *		 * @param p_dateobj Date (optional)		 */		public static function getCalendarWeek(p_dateobj : Date) : Number 		{			var tag : Number = 86400000;			var date1 : Date = new Date();			date1.setTime(p_dateobj.getTime() + (3 - (p_dateobj.getDay() + 6) % 7) * tag);			var date2 : Date = new Date(date1.getFullYear(), 0, 4);			var date3 : Date = new Date(date2.getTime() + (3 - (date2.getDay() + 6) % 7) * tag);			return Math.floor(1.5 + (date1.getTime() - date3.getTime()) / tag / 7);		}
				/**		 * Returns days of the month. 		 * If p_dateobj is null a new Date Object is created		 *		 * @param p_dateobj Date (optional)		 */		public static function getDaysofMonth(p_dateobj : Date) : Number 		{			var date : Date = new Date(p_dateobj.getFullYear(), p_dateobj.getMonth(), 0);				return date.getDate();		}
				/**		 * Returns the day of the year. 		 * If p_dateobj is null a new Date Object is created		 *		 * @param p_dateobj Date (optional)		 */		public static function getDayofYear(p_dateobj : Date) : Number 		{			var year : Number = p_dateobj.getFullYear();			var day : Number = p_dateobj.getDate();			for (var i : Number = 0;i < p_dateobj.getMonth(); i++) 			{				day += (new Date(year, i + 1, 0)).getDate();			}			return day;			}
				/**		 * Returns if date is a leap year. 		 * If p_dateobj is null a new Date Object is created		 *		 * @param p_dateobj Date (optional)		 */		public static function isLeapYear(p_dateobj : Date) : Boolean 		{			if((p_dateobj.fullYear / 4) == int(p_dateobj.fullYear / 4)) 			{				return true;			} 			return false;		}
				public static function parseMysqlDate(p_date : String) : Date		{			var reg : RegExp = /(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})/gi;			var result : Object = reg.exec(p_date);			if(result == null)			{				reg = /(\d{4})-(\d{2})-(\d{2})/gi;				result = reg.exec(p_date);				result[4] = 0;				result[5] = 0;				result[6] = 0;			}			if(result == null)			{				throw new Error("The given Date ist not a MySQL Date!");			}						var date : Date = new Date(result[1], result[2] - 1, result[3], result[4], result[5], result[6]);			return date;		}
				public static function getMysqlDate(p_date : Date) : String		{			if(p_date)			{				var month : String = ((p_date.month + 1) < 10) ? "0" + (p_date.month + 1) : (p_date.month + 1).toString();				var day : String = (p_date.date < 10) ? "0" + p_date.date : p_date.date.toString();				return p_date.fullYear + "-" + month + "-" + day;			} 			return "";		}
				public static function getMysqlDateTime(p_date : Date) : String		{			if(p_date)			{				var month : String = ((p_date.month + 1) < 10) ? "0" + (p_date.month + 1) : (p_date.month + 1).toString();				var day : String = (p_date.date < 10) ? "0" + p_date.date : p_date.date.toString();				var hours : String = (p_date.hours < 10) ? "0" + p_date.hours : p_date.hours.toString();				var minutes : String = (p_date.minutes < 10) ? "0" + p_date.minutes : p_date.minutes.toString();				var seconds : String = (p_date.seconds < 10) ? "0" + p_date.seconds : p_date.seconds.toString();				return p_date.fullYear + "-" + month + "-" + day + " " + hours + ":" + minutes + ":" + seconds;			} 			return "";		}
				public static function getTimeWithoutSeconds(p_date : Date) : String		{			if(p_date)			{				var hours : String = (p_date.hours < 10) ? "0" + p_date.hours : p_date.hours.toString();				var minutes : String = (p_date.minutes < 10) ? "0" + p_date.minutes : p_date.minutes.toString();				return hours + ":" + minutes;			} 			return "";		}
				public static function compareDates(date1 : Date,date2 : Date) : Number
		{			return date1.getTime() - date2.getTime();		}
				public static function getSeconds(date1 : Date,date2 : Date) : Number
		{			return Math.floor(compareDates(date1, date2) / 1000);		}
				public static function getMinutes(date1 : Date,date2 : Date) : Number
		{			return Math.floor(getSeconds(date1, date2) / 60);		}
				public static function getHours(date1 : Date,date2 : Date) : Number
		{			return Math.floor(getMinutes(date1, date2) / 60);		}
				public static function getDays(date1 : Date,date2 : Date) : Number
		{			return Math.floor(getHours(date1, date2) / 24);		}
				public static function getMonths(date1 : Date,date2 : Date) : Number
		{			var yearDiff:Number = getYears(date1, date2);			var monthDiff:Number = date1.getMonth() - date2.getMonth();			if(monthDiff < 0)
			{				monthDiff += 12;			}			if(date1.getDate() < date2.getDate())
			{				monthDiff -= 1;			}			return 12 * yearDiff + monthDiff;		}
		private static function getYears(date1 : Date,date2 : Date) : Number
		{			return Math.floor(getDays(date1, date2) / 365);		}	}}