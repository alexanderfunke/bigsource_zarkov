package de.bigsource.model.database.base {	import de.bigsource.model.database.DB;	import de.bigsource.model.vo.AbstractVO;	import flash.utils.describeType;	import flash.utils.getQualifiedClassName;	/**	 * @author alexanderfunke	 */	public class AbstractTable extends AbstractVO	{		public var id : int;		public var created_at : Date;		public var updated_at : Date;		public var indexes : Array;		public function many(p_table : String) : Array		{			var variables : XMLList = describeType(this)..variable;			for (var i : Number = 0;i < variables.length(); i++) 			{				if(variables[i].@name.toString().indexOf("has_many") == 0 && p_table.toLowerCase() == variables[i].@name.toString().replace("has_many_", ""))				{					var field : String = getQualifiedClassName(this).split("::")[1].toLowerCase().slice(0, getQualifiedClassName(this).split("::")[1].toLowerCase().length - 1);					var conditions : Object = new Object();					conditions[field + "_id"] = this.id;					return DB.findMany(p_table, conditions);				}			}			return null;		}		public function one(p_table : String) : AbstractTable		{			var variables : XMLList = describeType(this)..variable;			for (var i : Number = 0;i < variables.length(); i++) 			{				if(variables[i].@name.toString().indexOf("belongs_to") == 0 && p_table.toLowerCase() == variables[i].@name.toString().replace("belongs_to_", ""))				{										return DB.findOne(p_table, Number(this[p_table.toLowerCase().slice(0, p_table.toLowerCase().length - 1) + "_id"]));				} else if(variables[i].@name.toString().indexOf("has_one") == 0 && p_table.toLowerCase() == variables[i].@name.toString().replace("has_one_", "")){					var field : String = getQualifiedClassName(this).split("::")[1].toLowerCase().slice(0, getQualifiedClassName(this).split("::")[1].toLowerCase().length - 1);					var conditions : Object = new Object();					conditions[field + "_id"] = this.id;					return DB.findOne(p_table, conditions);					}			}			return null;		}		public function update(p_args : Object) : Object		{						var entry : AbstractTable = this;			for (var key : String in p_args) 			{				try				{					entry[key] = p_args[key];				} catch(e : Error)				{					throw new Error("The field \"" + key + "\" in Table \"" + getQualifiedClassName(this).split("::")[1] + "\" does not exist");					}			}						entry["updated_at"] = new Date();			return entry;		}				public function deleteEntry(p_table : String) : void		{			DB.remove(p_table, this.id);		}				public function destroy():void{			//nothing to do. for later use		}	}}