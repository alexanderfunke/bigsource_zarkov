package de.bigsource.model.sound{	import gs.TweenLite;	import gs.utils.tween.TweenLiteVars;	import org.puremvc.as3.multicore.interfaces.IProxy;	import org.puremvc.as3.multicore.patterns.proxy.Proxy;	
	/**	 * @version 1.0	 * @author kimchristiansen	 */	public class SoundProxy extends Proxy implements IProxy 	{		public static const NAME : String = "SoundProxy";		public static const GROUP_MUSIC : String = "GROUP_MUSIC";		public static const GROUP_VIDEO : String = "GROUP_VIDEO";		public static const GROUP_ALL : String = "GROUP_ALL";		public var ar_soundcontainer : Array;
		private var _ar_mutegroup : Array;

		public function SoundProxy() 		{			super(NAME);		}
		override public function onRegister() : void		{			ar_soundcontainer = new Array();			_ar_mutegroup = new Array();			_ar_mutegroup[GROUP_ALL] = false;		}
		/**		 * Adds a sound from the library to the sounds dictionary for playing in the future.		 * 		 * @param p_linkageID The class name of the library symbol that was exported for AS		 * @param p_id The string identifier of the sound to be used when calling other methods on the sound		 * 		 * @return Boolean A boolean value representing if the sound was added successfully		 */		public function addLibrarySound(p_linkageID : *, p_id : String, p_group : String = "default") : Boolean		{			if( createSoundItem(p_id, p_group) )			{				getSoundItem(p_id).addLibrarySound(p_linkageID);				return true;			}						return false;		}
		/**		 * Adds an external sound to the sounds dictionary for playing in the future.		 * 		 * @param p_path A string representing the path where the sound is on the server		 * @param p_id The string identifier of the sound to be used when calling other methods on the sound		 * @param p_buffer The number, in milliseconds, to buffer the sound before you can play it (default: 1000)		 * @param p_checkPolicyFile A boolean that determines whether Flash Player should try to download a cross-domain policy file from the loaded sound's server before beginning to load the sound (default: false) 		 * 		 * @return Boolean A boolean value representing if the sound was added successfully		 */		public function addExternalSound(p_path : String, p_id : String, p_group : String = "default", p_buffer : Number = 1000, p_checkPolicyFile : Boolean = false) : Boolean		{			if( createSoundItem(p_id, p_group) )			{				getSoundItem(p_id).addExternalSound(p_path, p_buffer, p_checkPolicyFile);				return true;			}						return false;		}
		public function registerSoundItem(p_sounditem : SoundItem, p_group : String = "video") : Boolean		{//			var snd : SoundItem;//			for each( snd in ar_soundcontainer)//			{//				if( snd.id == p_sounditem.id ) return false;//			}						ar_soundcontainer[p_sounditem.id] = p_sounditem;						if( _ar_mutegroup[p_group] == null)			{				_ar_mutegroup[p_group] = _ar_mutegroup[GROUP_ALL];			}						if( _ar_mutegroup[p_group] || _ar_mutegroup[GROUP_ALL])			{				mute(p_sounditem.id);			}						if( p_group == "GROUP_ALL" )			{				throw new Error("The name of the group can not be 'GROUP_ALL'");			}						return true;		}		
		private function createSoundItem(p_id : String, p_group : String) : Boolean		{			var snd : SoundItem;						for each( snd in ar_soundcontainer)			{				if( snd.id == p_id ) return false;				}						snd = new SoundItem(p_id, p_group);			snd.addEventListener(SoundNotification.ON_SOUND_COMPLETE, onSoundComplete, false, 0, true);				snd.addEventListener(SoundNotification.ON_SOUND_ID3, onSoundID3, false, 0, true);				snd.addEventListener(SoundNotification.ON_SOUND_ERROR, onSoundError, false, 0, true);				snd.addEventListener(SoundNotification.ON_SOUND_LOADING_COMPLETE, onSoundLoadingComplete, false, 0, true);				snd.addEventListener(SoundNotification.ON_SOUND_OPEN, onSoundOpen, false, 0, true);				snd.addEventListener(SoundNotification.ON_SOUND_PROGRESS, onSoundProgress, false, 0, true);				ar_soundcontainer[p_id] = snd;						if( _ar_mutegroup[p_group] == null)			{				_ar_mutegroup[p_group] = _ar_mutegroup[GROUP_ALL];			}						if( _ar_mutegroup[p_group] || _ar_mutegroup[GROUP_ALL])			{				mute(snd.id);			}						if( p_group == "GROUP_ALL" )			{				throw new Error("The name of the group can not be 'GROUP_ALL'");			}						return true;		}
		/**		 * Returns SoundItem Object of the sound with the given id		 */		public function getSoundItem(p_id : String) : SoundItem		{					if(ar_soundcontainer[p_id] == null)			{				return null;			}									return ar_soundcontainer[p_id];		}
		public function play(p_id : String, p_volume : Number = -1, p_startTime : Number = 0, p_loops : int = 0) : void		{			getSoundItem(p_id).play(p_volume, p_startTime, p_loops);		}
		public function stop(p_id : String) : void		{			getSoundItem(p_id).stop();		}
		public function pause(p_id : String) : void		{			getSoundItem(p_id).pause();		}
		public function seek(p_id : String, p_msec : Number) : void		{			getSoundItem(p_id).seek(p_msec);		}
		public function mute(p_id : String) : void		{			getSoundItem(p_id).mute();		}
		public function unmute(p_id : String) : void		{			getSoundItem(p_id).unmute();		}
		public function setVolume(p_id : String, p_volume : Number) : void		{			getSoundItem(p_id).volume = p_volume;		}
		public function getVolume(p_id : String) : Number		{			return getSoundItem(p_id).volume;		}
		public function fade(p_id : String, p_targVolume : Number = 0, p_fadeLength : Number = 1) : void		{			var tweendata : TweenLiteVars = new TweenLiteVars();			tweendata.volume = p_targVolume;			tweendata.overwrite = 1;						TweenLite.to(getSoundItem(p_id), p_fadeLength, tweendata);		}
		public function fadeGroup(p_group : String, p_targVolume : Number = 0, p_fadeLength : Number = 1) : void		{			for each( var snd:SoundItem in ar_soundcontainer)			{				if( snd.group == p_group || p_group == GROUP_ALL)				{					var tweendata : TweenLiteVars = new TweenLiteVars();					tweendata.volume = p_targVolume;					tweendata.overwrite = 1;								TweenLite.to(getSoundItem(snd.id), p_fadeLength, tweendata);				}			}		}
		public function getPosition(p_id : String) : Number		{			return getSoundItem(p_id).position;		}
		public function getDuration(p_id : String) : Number		{			return getSoundItem(p_id).duration;		}
		public function remove(p_id : String) : void		{				var snd : SoundItem = getSoundItem(p_id);						snd.removeEventListener(SoundNotification.ON_SOUND_COMPLETE, onSoundComplete);				snd.removeEventListener(SoundNotification.ON_SOUND_ID3, onSoundID3);				snd.removeEventListener(SoundNotification.ON_SOUND_ERROR, onSoundError);				snd.removeEventListener(SoundNotification.ON_SOUND_LOADING_COMPLETE, onSoundLoadingComplete);				snd.removeEventListener(SoundNotification.ON_SOUND_OPEN, onSoundOpen);				snd.removeEventListener(SoundNotification.ON_SOUND_PROGRESS, onSoundProgress);				snd.destroy();						ar_soundcontainer[p_id] = null;			delete ar_soundcontainer[p_id];		}
		public function muteGroup(p_group : String = "GROUP_ALL") : void		{			_ar_mutegroup[p_group] = true;						for each( var snd:SoundItem in ar_soundcontainer)			{				if( snd.group == p_group || p_group == GROUP_ALL)				{					mute(snd.id);				}			}		}
		public function unmuteGroup(p_group : String = "GROUP_ALL") : void		{			_ar_mutegroup[p_group] = false;						for each( var snd:SoundItem in ar_soundcontainer)			{				if( snd.group == p_group || p_group == GROUP_ALL)				{					unmute(snd.id);				}			}		}
		public function isGroupMuted(p_group : String = "GROUP_ALL") : Boolean		{			return _ar_mutegroup[p_group];		}
		public function removeGroup(p_group : String = "GROUP_ALL") : void		{			for each( var snd:SoundItem in ar_soundcontainer)			{				if( snd.group == p_group || p_group == GROUP_ALL)				{					remove(snd.id);				}			}		}
		private function onSoundComplete(event : SoundNotification) : void		{			sendNotification(SoundNotification.ON_SOUND_COMPLETE, event.id);		}
		private function onSoundID3(event : SoundNotification) : void		{			sendNotification(SoundNotification.ON_SOUND_ID3, event.id);		}
		private function onSoundError(event : SoundNotification) : void		{			sendNotification(SoundNotification.ON_SOUND_ERROR, event.id);		}
		private function onSoundLoadingComplete(event : SoundNotification) : void		{			sendNotification(SoundNotification.ON_SOUND_LOADING_COMPLETE, event.id);		}
		private function onSoundOpen(event : SoundNotification) : void		{			sendNotification(SoundNotification.ON_SOUND_OPEN, event.id);		}
		private function onSoundProgress(event : SoundNotification) : void		{			sendNotification(SoundNotification.ON_SOUND_PROGRESS, event.id);		}
		override public function onRemove() : void		{			removeGroup(GROUP_ALL);			}	}}